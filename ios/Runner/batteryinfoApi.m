// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "batteryinfoApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface BatteryInfo ()
+ (BatteryInfo *)fromList:(NSArray *)list;
+ (nullable BatteryInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation BatteryInfo
+ (instancetype)makeWithBatteryPercentage:(nullable NSString *)batteryPercentage {
  BatteryInfo* pigeonResult = [[BatteryInfo alloc] init];
  pigeonResult.batteryPercentage = batteryPercentage;
  return pigeonResult;
}
+ (BatteryInfo *)fromList:(NSArray *)list {
  BatteryInfo *pigeonResult = [[BatteryInfo alloc] init];
  pigeonResult.batteryPercentage = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable BatteryInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [BatteryInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.batteryPercentage ?: [NSNull null]),
  ];
}
@end

@interface BatteryInfoApiCodecReader : FlutterStandardReader
@end
@implementation BatteryInfoApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [BatteryInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BatteryInfoApiCodecWriter : FlutterStandardWriter
@end
@implementation BatteryInfoApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BatteryInfo class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BatteryInfoApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BatteryInfoApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BatteryInfoApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BatteryInfoApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BatteryInfoApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    BatteryInfoApiCodecReaderWriter *readerWriter = [[BatteryInfoApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void BatteryInfoApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BatteryInfoApi> *api) {
  /// This abstract function will contain code that performs communication
  /// with native platforms, sending in [FileData] as a message and receiving [Response] as a response.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.methodchanneldemo_sample1.BatteryInfoApi.getbatteryInformation"
        binaryMessenger:binaryMessenger
        codec:BatteryInfoApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getbatteryInformationWithError:)], @"BatteryInfoApi api (%@) doesn't respond to @selector(getbatteryInformationWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        BatteryInfo *output = [api getbatteryInformationWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
